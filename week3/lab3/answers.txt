sort1 uses: Bubble Sort

How do you know?: In the sorted .txt, it had the best time compared to reveresed and random, so the best case scenario was omega(n) which is a characteristic of selection sort.
Worst case scenarios were about the same time to complete, which indicates O(n^2) time.

sort2 uses: Merge sort

How do you know?: It had the fastest time in the random (worst case) for 50000 entries, and it did not make much of a difference in running time if the input was sorted, reveresed, or random, took approx the same time which is a characteristic of Merge sort.

sort3 uses: Selection sort

How do you know?: Reverse sort took the longest to sort compared to sorted and random input, as that is th worst case scenario for Selection sort. But the time is not much worse than sorted, and over large data sets omega(n^2) is pretty much the same as O(n^2)


sort1:
sorted 5000: 0.011s
sorted 10000: 0.066s

sorted 50000: 1.403
reverse 50000:12.2s
random 50000: 15.3s


sort2:
sorted 5000:0.021s
sorted 10000: 0.104

sorted 50000: 1.925, 2.3
reverse 50000:2.3s, 2.1
random 50000: 2.6s, 1.9s


Sort3:
sorted 5000:0.36s
sorted 10000:0.228

sorted 50000: 7.484, 7.9
reverse 50000:8.1s, 8.3
random 50000: 6.7, 6.8